
Skip to content
Pull requests
Issues
Marketplace
Explore
@jaybekster

38
2.1k

    214

cheggaaa/pb
Code
Issues 14
Pull requests 2
Actions
Projects 0
Security
Insights
Console progress bar for Golang
go
progress-bar
terminal

289 commits
3 branches
0 packages
41 releases
57 contributors

    BSD-3-Clause

@cheggaaa
cheggaaa update modules & v3.0.3
Latest commit
e2fc8a7
on Nov 28, 2019
Type 	Name 	Latest commit message 	Commit time
	v3 	update modules & v3.0.3 	last month
	.travis.yml 	setup ci 	4 months ago
	LICENSE 	example for godoc 	4 years ago
	README.md 	readme for v3 and small fixes 	6 months ago
	README_V1.md 	Update README_V1.md 	6 months ago
	example_copy_test.go 	go mod for v1 	6 months ago
	example_multiple_test.go 	go mod for v1 	6 months ago
	example_test.go 	go mod for v1 	6 months ago
	format.go 	keep days 	2 years ago
	format_test.go 	add test for multi-day durations 	2 years ago
	go.mod 	revert changes to go.mod 	last month
	go.sum 	go mod for v1 	6 months ago
	pb.go 	Merge pull request #149 from xiaofeige/master 	6 months ago
	pb_appengine.go 	WebAssembly/JS support 	last year
	pb_test.go 	atomically set Total and Reset method 	2 years ago
	pb_win.go 	Fix panic with multiple bars in Windows 	2 years ago
	pb_x.go 	WebAssembly/JS support 	last year
	pool.go 	support for non-tty execution in pool_x.go and pb_x.go 	last year
	pool_win.go 	Panic in pool_win.go (coordinates.Y is negative) #98 	3 years ago
	pool_x.go 	#97 was eliminate some data races 	3 years ago
	reader.go 	Call 'Finish' when the wrapped Reader or Writer is closed 	last month
	runecount.go 	fix runecount and colors 	3 years ago
	runecount_test.go 	More correct string width #90 	3 years ago
	termios_bsd.go 	Add proper solaris fixes, additionally expose GetTerminalWidth() func… 	4 years ago
	termios_sysv.go 	Improve the portability of termios handling. 	2 years ago
	writer.go 	Call 'Finish' when the wrapped Reader or Writer is closed 	last month
README.md
Terminal progress bar for Go

Coverage Status
Installation

go get github.com/cheggaaa/pb/v3

Documentation for v1 bar available here
Quick start

package main

import (
	"time"

	"github.com/cheggaaa/pb/v3"
)

func main() {
	count := 100000
	// create and start new bar
	bar := pb.StartNew(count)

	// start bar from 'default' template
	// bar := pb.Default.Start(count)

	// start bar from 'simple' template
	// bar := pb.Simple.Start(count)

	// start bar from 'full' template
	// bar := pb.Full.Start(count)

	for i := 0; i < count; i++ {
		bar.Increment()
		time.Sleep(time.Millisecond)
	}
	bar.Finish()
}

Result will be like this:

> go run test.go
37158 / 100000 [================>_______________________________] 37.16% 1m11s

Settings

// create bar
bar := pb.New(count)

// refresh info every second (default 200ms)
bar.SetRefreshRate(time.Second)

// force set io.Writer, by default it's os.Stderr
bar.SetWriter(os.Stdout)

// bar will format numbers as bytes (B, Kb, Mb, etc)
bar.Set(pb.Byte, true)

// set custom bar template
bar.SetTemplateString(myTemplate)

// check for error after template set
if err = bar.Err(); err != nil {
    return
}

// start bar
bar.Start()

Progress bar for IO Operations

package main

import (
	"crypto/rand"
	"io"
	"io/ioutil"

	"github.com/cheggaaa/pb/v3"
)

func main() {

	var limit int64 = 1024 * 1024 * 500
	// we will copy 200 Mb from /dev/rand to /dev/null
	reader := io.LimitReader(rand.Reader, limit)
	writer := ioutil.Discard

	// start new bar
	bar := pb.Full.Start64(limit)
	// create proxy reader
	barReader := bar.NewProxyReader(reader)
	// copy from proxy reader
	io.Copy(writer, barReader)
	// finish bar
	bar.Finish()
}

Custom Progress Bar templates

Rendering based on builtin text/template package. You can use existing pb's elements or create you own.

All available elements are described in element.go file.
All in one example:

tmpl := `{{ red "With funcs:" }} {{ bar . "<" "-" (cycle . "↖" "↗" "↘" "↙" ) "." ">"}} {{speed . | rndcolor }} {{percent .}} {{string . "my_green_string" | green}} {{string . "my_blue_string" | blue}}`
// start bar based on our template
bar := pb.ProgressBarTemplate(tmpl).Start64(limit)
// set values for string elements
bar.Set("my_green_string", "green").
	Set("my_blue_string", "blue")

    © 2020 GitHub, Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    Pricing
    API
    Training
    Blog
    About
